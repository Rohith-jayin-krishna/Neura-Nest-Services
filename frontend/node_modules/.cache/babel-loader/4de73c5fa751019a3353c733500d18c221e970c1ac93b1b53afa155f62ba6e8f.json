{"ast":null,"code":"var _jsxFileName = \"/Users/rohithjayin/neura-nest/frontend/src/Context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/Context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios'; // Import axios for interceptors\n\n// Create the AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// AuthProvider component to wrap your application\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // State to hold the authentication token and user info\n  // Initialize state by trying to load from sessionStorage\n  const [authToken, setAuthToken] = useState(() => {\n    try {\n      const storedToken = sessionStorage.getItem('authToken');\n      return storedToken ? JSON.parse(storedToken) : null;\n    } catch (error) {\n      console.error(\"Failed to parse authToken from sessionStorage:\", error);\n      return null;\n    }\n  });\n  const [user, setUser] = useState(() => {\n    try {\n      const storedUser = sessionStorage.getItem('user');\n      return storedUser ? JSON.parse(storedUser) : null;\n    } catch (error) {\n      console.error(\"Failed to parse user from sessionStorage:\", error);\n      return null;\n    }\n  });\n  const [loading, setLoading] = useState(false); // Can be used for async operations if needed\n\n  // --- Login Function ---\n  // This function will be called by your LogIn.js component upon successful login.\n  // It updates the in-memory state AND saves to sessionStorage.\n  const login = (tokenData, userData) => {\n    setAuthToken(tokenData);\n    setUser(userData);\n    sessionStorage.setItem('authToken', JSON.stringify(tokenData)); // Save to sessionStorage\n    sessionStorage.setItem('user', JSON.stringify(userData)); // Save to sessionStorage\n  };\n\n  // --- Logout Function ---\n  // This function will be called by your Navbar or any logout button.\n  // It clears the in-memory authentication state AND removes from sessionStorage.\n  const logout = () => {\n    setAuthToken(null);\n    setUser(null);\n    sessionStorage.removeItem('authToken'); // Remove from sessionStorage\n    sessionStorage.removeItem('user'); // Remove from sessionStorage\n  };\n\n  // --- Axios Interceptor for automatically attaching token to requests ---\n  // This useEffect hook configures Axios to include the access token\n  // in the Authorization header for all outgoing requests, but only if a token exists.\n  useEffect(() => {\n    const requestInterceptor = axios.interceptors.request.use(config => {\n      if (authToken && authToken.access) {\n        config.headers.Authorization = `Bearer ${authToken.access}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n\n    // Cleanup function: This runs when the component unmounts or when authToken changes.\n    // It ejects the interceptor to prevent memory leaks or stale interceptors.\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n    };\n  }, [authToken]); // Dependency array: re-run this effect if authToken changes\n\n  // Provide the authentication state and functions to children components\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      authToken,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to easily consume the AuthContext in any functional component\n_s(AuthProvider, \"F0Eg80zc9sFKllMamSo8QIlFshw=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authToken","setAuthToken","storedToken","sessionStorage","getItem","JSON","parse","error","console","user","setUser","storedUser","loading","setLoading","login","tokenData","userData","setItem","stringify","logout","removeItem","requestInterceptor","interceptors","request","use","config","access","headers","Authorization","Promise","reject","eject","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/rohithjayin/neura-nest/frontend/src/Context/AuthContext.js"],"sourcesContent":["// frontend/src/Context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios'; // Import axios for interceptors\n\n// Create the AuthContext\nconst AuthContext = createContext(null);\n\n// AuthProvider component to wrap your application\nexport const AuthProvider = ({ children }) => {\n  // State to hold the authentication token and user info\n  // Initialize state by trying to load from sessionStorage\n  const [authToken, setAuthToken] = useState(() => {\n    try {\n      const storedToken = sessionStorage.getItem('authToken');\n      return storedToken ? JSON.parse(storedToken) : null;\n    } catch (error) {\n      console.error(\"Failed to parse authToken from sessionStorage:\", error);\n      return null;\n    }\n  });\n\n  const [user, setUser] = useState(() => {\n    try {\n      const storedUser = sessionStorage.getItem('user');\n      return storedUser ? JSON.parse(storedUser) : null;\n    } catch (error) {\n      console.error(\"Failed to parse user from sessionStorage:\", error);\n      return null;\n    }\n  });\n\n  const [loading, setLoading] = useState(false); // Can be used for async operations if needed\n\n  // --- Login Function ---\n  // This function will be called by your LogIn.js component upon successful login.\n  // It updates the in-memory state AND saves to sessionStorage.\n  const login = (tokenData, userData) => {\n    setAuthToken(tokenData);\n    setUser(userData);\n    sessionStorage.setItem('authToken', JSON.stringify(tokenData)); // Save to sessionStorage\n    sessionStorage.setItem('user', JSON.stringify(userData));       // Save to sessionStorage\n  };\n\n  // --- Logout Function ---\n  // This function will be called by your Navbar or any logout button.\n  // It clears the in-memory authentication state AND removes from sessionStorage.\n  const logout = () => {\n    setAuthToken(null);\n    setUser(null);\n    sessionStorage.removeItem('authToken'); // Remove from sessionStorage\n    sessionStorage.removeItem('user');       // Remove from sessionStorage\n  };\n\n  // --- Axios Interceptor for automatically attaching token to requests ---\n  // This useEffect hook configures Axios to include the access token\n  // in the Authorization header for all outgoing requests, but only if a token exists.\n  useEffect(() => {\n    const requestInterceptor = axios.interceptors.request.use(\n      config => {\n        if (authToken && authToken.access) {\n          config.headers.Authorization = `Bearer ${authToken.access}`;\n        }\n        return config;\n      },\n      error => Promise.reject(error)\n    );\n\n    // Cleanup function: This runs when the component unmounts or when authToken changes.\n    // It ejects the interceptor to prevent memory leaks or stale interceptors.\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n    };\n  }, [authToken]); // Dependency array: re-run this effect if authToken changes\n\n  // Provide the authentication state and functions to children components\n  return (\n    <AuthContext.Provider value={{ user, authToken, loading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to easily consume the AuthContext in any functional component\nexport const useAuth = () => {\n  return useContext(AuthContext);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}