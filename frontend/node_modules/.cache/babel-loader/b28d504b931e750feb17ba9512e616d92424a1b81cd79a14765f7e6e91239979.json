{"ast":null,"code":"var _jsxFileName = \"/Users/rohithjayin/neura-nest/frontend/src/Context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// frontend/src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios'; // Import axios for interceptors\n\n// Create the AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\n\n// AuthProvider component to wrap your application\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // <--- This is the first export\n  // State to hold the authentication token and user info (in memory only)\n  const [authToken, setAuthToken] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false); // Can be used for async operations if needed\n\n  // --- Login Function ---\n  const login = (tokenData, userData) => {\n    setAuthToken(tokenData);\n    setUser(userData);\n  };\n\n  // --- Logout Function ---\n  const logout = () => {\n    setAuthToken(null);\n    setUser(null);\n  };\n\n  // --- Axios Interceptor ---\n  useEffect(() => {\n    const requestInterceptor = axios.interceptors.request.use(config => {\n      if (authToken && authToken.access) {\n        config.headers.Authorization = `Bearer ${authToken.access}`;\n      }\n      return config;\n    }, error => Promise.reject(error));\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n    };\n  }, [authToken]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      authToken,\n      loading,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to easily consume the AuthContext\n_s(AuthProvider, \"L54i7WkGPRrod25orhNKMZjsLZU=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  // <--- This is the second export\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","axios","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authToken","setAuthToken","user","setUser","loading","setLoading","login","tokenData","userData","logout","requestInterceptor","interceptors","request","use","config","access","headers","Authorization","error","Promise","reject","eject","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["/Users/rohithjayin/neura-nest/frontend/src/Context/AuthContext.js"],"sourcesContent":["// frontend/src/context/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport axios from 'axios'; // Import axios for interceptors\n\n// Create the AuthContext\nconst AuthContext = createContext(null);\n\n// AuthProvider component to wrap your application\nexport const AuthProvider = ({ children }) => { // <--- This is the first export\n  // State to hold the authentication token and user info (in memory only)\n  const [authToken, setAuthToken] = useState(null);\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false); // Can be used for async operations if needed\n\n  // --- Login Function ---\n  const login = (tokenData, userData) => {\n    setAuthToken(tokenData);\n    setUser(userData);\n  };\n\n  // --- Logout Function ---\n  const logout = () => {\n    setAuthToken(null);\n    setUser(null);\n  };\n\n  // --- Axios Interceptor ---\n  useEffect(() => {\n    const requestInterceptor = axios.interceptors.request.use(\n      config => {\n        if (authToken && authToken.access) {\n          config.headers.Authorization = `Bearer ${authToken.access}`;\n        }\n        return config;\n      },\n      error => Promise.reject(error)\n    );\n\n    return () => {\n      axios.interceptors.request.eject(requestInterceptor);\n    };\n  }, [authToken]);\n\n  return (\n    <AuthContext.Provider value={{ user, authToken, loading, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Custom hook to easily consume the AuthContext\nexport const useAuth = () => { // <--- This is the second export\n  return useContext(AuthContext);\n};"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,IAAI,CAAC;;AAEvC;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAAE;EAC9C;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACY,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAMgB,KAAK,GAAGA,CAACC,SAAS,EAAEC,QAAQ,KAAK;IACrCP,YAAY,CAACM,SAAS,CAAC;IACvBJ,OAAO,CAACK,QAAQ,CAAC;EACnB,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBR,YAAY,CAAC,IAAI,CAAC;IAClBE,OAAO,CAAC,IAAI,CAAC;EACf,CAAC;;EAED;EACAX,SAAS,CAAC,MAAM;IACd,MAAMkB,kBAAkB,GAAGjB,KAAK,CAACkB,YAAY,CAACC,OAAO,CAACC,GAAG,CACvDC,MAAM,IAAI;MACR,IAAId,SAAS,IAAIA,SAAS,CAACe,MAAM,EAAE;QACjCD,MAAM,CAACE,OAAO,CAACC,aAAa,GAAG,UAAUjB,SAAS,CAACe,MAAM,EAAE;MAC7D;MACA,OAAOD,MAAM;IACf,CAAC,EACDI,KAAK,IAAIC,OAAO,CAACC,MAAM,CAACF,KAAK,CAC/B,CAAC;IAED,OAAO,MAAM;MACXzB,KAAK,CAACkB,YAAY,CAACC,OAAO,CAACS,KAAK,CAACX,kBAAkB,CAAC;IACtD,CAAC;EACH,CAAC,EAAE,CAACV,SAAS,CAAC,CAAC;EAEf,oBACEL,OAAA,CAACC,WAAW,CAAC0B,QAAQ;IAACC,KAAK,EAAE;MAAErB,IAAI;MAAEF,SAAS;MAAEI,OAAO;MAAEE,KAAK;MAAEG;IAAO,CAAE;IAAAX,QAAA,EACtEA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAA5B,EAAA,CA1CaF,YAAY;AAAA+B,EAAA,GAAZ/B,YAAY;AA2CzB,OAAO,MAAMgC,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAAE;EAC7B,OAAOvC,UAAU,CAACK,WAAW,CAAC;AAChC,CAAC;AAACkC,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}